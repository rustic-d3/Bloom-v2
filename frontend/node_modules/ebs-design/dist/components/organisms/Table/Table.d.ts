import * as React from 'react';
import { Column, ColumnGroup, Summary } from 'rc-table';
import { TableProps as RCTableProps } from 'rc-table/lib/Table';
import { ColumnType as RCColumnType } from 'rc-table/lib/interface';
import { SizeType } from 'types';
declare type FilterType = 'asc' | 'desc';
interface ColumnType<T> extends RCColumnType<T> {
    onFilter?: (type: FilterType) => FilterType;
    mobileRender?: (data: T) => React.ReactNode;
    emptyCell?: string | React.ReactNode;
    children?: ColumnType<T>[];
}
interface TableProps<T> extends RCTableProps<T> {
    size?: SizeType;
    columns?: ColumnType<T>[];
    emptyCell?: string | React.ReactNode;
}
declare const Table: <T extends object>({ size, emptyCell, children, ...props }: TableProps<T>) => React.ReactElement;
export { Table, Column, ColumnGroup, Summary };
export type { TableProps, ColumnType };
